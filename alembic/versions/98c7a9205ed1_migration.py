from alembic import op
import sqlalchemy as sa
import sqlmodel
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '98c7a9205ed1'
down_revision = '3ea3b7bc32ad'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Supprimez l'index associé à la colonne `location_id` s'il existe
    op.drop_index('ix_location_id', table_name='chargepoint')
    
    # Supprimez la contrainte de clé étrangère avant de supprimer la colonne
    op.drop_constraint('chargepoint_location_id_fkey', 'chargepoint', type_='foreignkey')
    
    # Supprimez la colonne `location_id` de la table `chargepoint`
    op.drop_column('chargepoint', 'location_id')
    
    # Supprimez la table `location` si elle n'est plus nécessaire
    op.drop_table('location')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Restaurer la table `location`
    op.create_table('location',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='location_pkey')
    )
    
    # Restaurer la colonne `location_id` dans la table `chargepoint`
    op.add_column('chargepoint', sa.Column('location_id', sa.INTEGER(), autoincrement=False, nullable=True))
    
    # Restaurer la contrainte de clé étrangère entre `chargepoint` et `location`
    op.create_foreign_key('chargepoint_location_id_fkey', 'chargepoint', 'location', ['location_id'], ['id'])
    
    # Restaurer l'index sur `location_id`
    op.create_index('ix_location_id', 'chargepoint', ['location_id'], unique=False)
    # ### end Alembic commands ###
